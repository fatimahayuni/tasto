import P, { useState as w, useEffect as y } from "react";
import * as v from "@uploadcare/file-uploader";
const b = /* @__PURE__ */ new Set([
  "children",
  "ref",
  "style",
  "className"
]), A = (e = {}) => Object == null ? void 0 : Object.keys(e).reduce((t, o) => {
  var s, r;
  const n = e == null ? void 0 : e[o], a = `on${(r = (s = n == null ? void 0 : n.split("-")) == null ? void 0 : s.map((c) => c.charAt(0).toUpperCase() + c.slice(1))) == null ? void 0 : r.join("")}`;
  return t[a] = n, t;
}, {}), m = /* @__PURE__ */ new WeakMap(), M = (e) => {
  let t = m.get(e);
  return t === void 0 && (t = /* @__PURE__ */ new Map(), m.set(e, t)), t;
}, E = ({
  node: e,
  nameProp: t,
  valueProp: o,
  prevValueProp: s,
  event: r
}) => {
  if (r !== void 0) {
    if (o !== s) {
      const n = M(e), a = n.has(r);
      let c = n.get(r);
      o !== void 0 ? a ? c.handleEvent = o : (c = { handleEvent: o }, n.set(r, c), e.addEventListener(
        r,
        (u) => c.handleEvent(u.detail)
      )) : a && (n.delete(r), e.removeEventListener(r, c));
    }
    return;
  }
  e[t] = o, o == null && t in HTMLElement.prototype && e.removeAttribute(t);
}, O = (e, t, o) => {
  const s = {}, r = {};
  return Object.entries(e).forEach(([n, a]) => {
    b.has(n) ? s[n === "className" ? "class" : n] = a : t.has(n) || n in o.prototype ? r[n] = a : s[n] = a;
  }), { reactProps: s, customElProps: r };
}, g = ({
  react: e,
  // https://react.dev/warnings/invalid-hook-call-warning
  tag: t,
  elClass: o,
  schemaEvents: s
}) => {
  const r = A(s), n = new Set(Object.keys(r ?? {})), a = e.forwardRef(
    (c, u) => {
      const i = e.useRef(/* @__PURE__ */ new Map()), d = e.useRef(null), { reactProps: h, customElProps: f } = O(c, n, o);
      return e.useLayoutEffect(() => {
        if (d.current === null)
          return;
        const p = /* @__PURE__ */ new Map();
        for (const l in f)
          E({
            node: d.current,
            nameProp: l,
            valueProp: f[l],
            prevValueProp: i.current.get(l),
            event: r[l]
          }), i.current.delete(l), p.set(l, c[l]);
        for (const [l, C] of i.current)
          E({
            node: d.current,
            nameProp: l,
            valueProp: void 0,
            prevValueProp: C,
            event: r[l]
          });
        i.current = p;
      }), e.createElement(t ?? o.__tag, {
        ...h,
        ref: e.useCallback(
          (p) => {
            d.current = p, typeof u == "function" ? u(p) : u !== null && (u.current = p);
          },
          [u]
        )
      });
    }
  );
  return a.displayName = o.name, a;
}, x = g({
  react: P,
  tag: "uc-config",
  elClass: v.Config
}), R = g({
  react: P,
  tag: "uc-upload-ctx-provider",
  elClass: v.UploadCtxProvider,
  schemaEvents: v.UploadCtxProvider.EventType
}), I = (e) => {
  const t = {}, o = {};
  return Object.entries(e).forEach(([s, r]) => {
    s.startsWith("on") ? t[s] = r : o[s] = r;
  }), {
    eventHandlers: t,
    config: o
  };
}, U = "1.0.0", j = "React-Uploader", L = () => `${j}/${U}`, S = ({ children: e }) => e, T = () => {
  const [e, t] = w(!1);
  return y(() => {
    typeof window < "u" && t(!0);
  }, []), e;
};
export {
  x as A,
  S as C,
  L as a,
  g as b,
  R as c,
  I as g,
  T as u
};
