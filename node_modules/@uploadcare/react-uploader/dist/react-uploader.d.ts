import type { ConfigType } from '@uploadcare/file-uploader';
import { defineLocale } from '@uploadcare/file-uploader';
import type { EventMap } from '@uploadcare/file-uploader';
import { FC } from 'react';
import { default as React_2 } from 'react';
import type { Ref } from 'react';
import { UploadCtxProvider } from '@uploadcare/file-uploader';

export { defineLocale }

export declare const FileUploaderInline: FC<TProps>;

export declare const FileUploaderMinimal: FC<TProps>;

export declare const FileUploaderRegular: FC<TProps>;

declare type TDefaultProps = {
    className?: string;
    classNameUploader?: string;
    ctxName?: string;
} & Pick<TProps_2, "fallback">;

export declare type TEventsSchema = {
    [K in keyof EventMap as TPrefixOnAndCamelCase<K>]: (event: EventMap[K]["detail"]) => void;
};

declare type TExtraPrefixOn<S extends string> = `on${Capitalize<S>}`;

declare type TPrefixOnAndCamelCase<S extends string> = TExtraPrefixOn<TToCamelCase<S>>;

export declare type TProps = TDefaultProps & TRefUploadCtxProvider & TPropsWithEvents & TPropsWithConfig;

declare type TProps_2 = {
    fallback?: React_2.ReactChild | React_2.ReactFragment | React_2.ReactPortal | null;
    condition?: boolean;
    children: React_2.ReactNode;
};

declare type TPropsWithConfig = Partial<ConfigType>;

declare type TPropsWithEvents = Partial<TEventsSchema>;

declare type TRefUploadCtxProvider = {
    apiRef?: Ref<InstanceType<UploadCtxProvider>>;
};

declare type TToCamelCase<S extends string> = S extends `${infer Head}-${infer Tail}` ? `${Lowercase<Head>}${Capitalize<TToCamelCase<Tail>>}` : Lowercase<S>;

export { UploadCtxProvider }


export * from "@uploadcare/file-uploader/types/index.js";

export { }
